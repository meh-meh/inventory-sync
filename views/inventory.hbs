<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{title}}</title> <!-- Use title passed from route -->
    <link href="https://cdn.jsdelivr.net/npm/handsontable@13.1.0/dist/handsontable.full.min.css" rel="stylesheet">
    <style>
        /* Keep specific styles for this view */
        .hot-container { height: 600px; overflow: hidden; margin: 20px; }
        .marketplace-badge {
            display: inline-flex;
            align-items: center;
            font-size: 0.8em;
            padding: 2px 5px;
            border-radius: 3px;
            margin-right: 5px;
        }
        .marketplace-badge img {
            height: 16px;
            width: auto;
            margin-right: 4px;
        }
        .etsy-badge { background-color: #F56400; color: white; }
        .shopify-badge { background-color: #96BF48; color: white; }
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .page-navigator {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
        }
        .page-navigator .page-input {
            width: 60px;
            text-align: center;
            margin: 0 10px;
        }
        .search-box {
            max-width: 300px;
        }
    </style>
</head>
<body>
    <!-- Navbar and flash messages are now in main.hbs -->

    <div class="container-fluid">
        <div class="gallery-sticky-header">
            <div class="row mt-3 justify-content-between align-items-center">
                <div class="col d-flex align-items-center">
                    <h2>{{title}}</h2> <!-- Use title passed from route -->
                </div>
                <div class="col d-flex justify-content-end align-items-center">
                    <div class="btn-group mb-3">
                        <!-- Add Product flow intentionally removed. See TODO in repo: Add Product feature disabled -->
                        <button id="addProperty" class="btn btn-primary">Add Property</button>
                        <button id="save" class="btn btn-primary">Save Changes</button>
                    </div>
                </div>
            </div>
            
            <div class="row justify-content-between align-items-center">
                <div class="col d-flex input-group search-box">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search products...">
                    <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
                <div class="col d-flex justify-content-end align-items-center">
                    <a href="/inventory/gallery" class="btn btn-outline-secondary"> <!-- Reverted: Link to gallery view -->
                        <i class="bi bi-grid-3x3-gap"></i> Switch to Gallery View
                    </a>
                </div>
            </div>
            
            <div class="row justify-content-between align-items-center">
                <div class="col d-flex align-items-center" id="itemsPerPageContainer">
                    <!-- This will be populated by JavaScript -->
                </div>
                <div class="col d-flex align-items-center justify-content-center" id="pageNavigatorContainer">
                    <!-- This will be populated by JavaScript -->
                </div>
                <div class="col d-flex align-items-center justify-content-end" id="countInfo">
                    <!-- This will be populated by JavaScript -->
                </div>
            </div>
        </div>

        <div class="hot-container">
            <div id="hotTable"></div>
            <div id="loadingOverlay" class="loading-overlay" style="display: none;">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details Modal -->
    <div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productDetailsModalLabel">Product Details: <span id="productTitle"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs" id="detailsTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab" aria-controls="overview" aria-selected="true">Overview</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="etsy-tab" data-bs-toggle="tab" data-bs-target="#etsy" type="button" role="tab" aria-controls="etsy" aria-selected="false">Etsy Data</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="shopify-tab" data-bs-toggle="tab" data-bs-target="#shopify" type="button" role="tab" aria-controls="shopify" aria-selected="false">Shopify Data</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="raw-tab" data-bs-toggle="tab" data-bs-target="#raw" type="button" role="tab" aria-controls="raw" aria-selected="false">Raw Data</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="detailsTabContent">
                        <!-- Overview Tab -->
                        <div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview-tab">
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <h5>Basic Information</h5>
                                    <dl class="row">
                                        <dt class="col-sm-4">SKU</dt>
                                        <dd class="col-sm-8" id="productSku"></dd>
                                        <dt class="col-sm-4">Location</dt>
                                        <dd class="col-sm-8" id="productLocation"></dd>
                                        <dt class="col-sm-4">On Hand</dt>
                                        <dd class="col-sm-8" id="productOnHand"></dd>
                                        <dt class="col-sm-4">Available</dt>
                                        <dd class="col-sm-8" id="productAvailable"></dd>
                                    </dl>
                                </div>
                                <div class="col-md-6">
                                    <h5>Image</h5>
                                    <!-- Carousel for Images -->
                                    <div id="productImageCarousel" class="carousel slide" data-bs-ride="carousel">
                                        <div class="carousel-inner" id="carouselImages">
                                            <!-- Images will be loaded here by JS -->
                                        </div>
                                        <button class="carousel-control-prev d-none" type="button" data-bs-target="#productImageCarousel" data-bs-slide="prev">
                                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                            <span class="visually-hidden">Previous</span>
                                        </button>
                                        <button class="carousel-control-next d-none" type="button" data-bs-target="#productImageCarousel" data-bs-slide="next">
                                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                            <span class="visually-hidden">Next</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Etsy Tab -->
                        <div class="tab-pane fade" id="etsy" role="tabpanel" aria-labelledby="etsy-tab">
                            <div class="mt-3">
                                <h5>Etsy Details</h5>
                                <dl class="row">
                                    <dt class="col-sm-4">Listing ID</dt>
                                    <dd class="col-sm-8"><span id="etsyListingId"></span> <a href="#" id="etsyLink" target="_blank" class="ms-2 d-none"><i class="bi bi-box-arrow-up-right"></i> View on Etsy</a></dd>
                                    <dt class="col-sm-4">Quantity</dt>
                                    <dd class="col-sm-8" id="etsyQuantity"></dd>
                                    <dt class="col-sm-4">Price</dt>
                                    <dd class="col-sm-8" id="etsyPrice"></dd>
                                    <dt class="col-sm-4">Status</dt>
                                    <dd class="col-sm-8" id="etsyStatus"></dd>
                                    <dt class="col-sm-4">Last Synced</dt>
                                    <dd class="col-sm-8" id="etsyLastSynced"></dd>
                                </dl>
                                <h5>Raw Etsy Data</h5>
                                <pre><code id="rawEtsyDataContent"></code></pre>
                            </div>
                        </div>
                        <!-- Shopify Tab -->
                        <div class="tab-pane fade" id="shopify" role="tabpanel" aria-labelledby="shopify-tab">
                             <div class="mt-3">
                                <h5>Shopify Details</h5>
                                <dl class="row">
                                    <dt class="col-sm-4">Product ID</dt>
                                    <dd class="col-sm-8"><span id="shopifyProductId"></span> <a href="#" id="shopifyLink" target="_blank" class="ms-2 d-none"><i class="bi bi-box-arrow-up-right"></i> View on Shopify</a></dd>
                                    <dt class="col-sm-4">Variant ID</dt>
                                    <dd class="col-sm-8" id="shopifyVariantId"></dd>
                                    <dt class="col-sm-4">Inventory Quantity</dt>
                                    <dd class="col-sm-8" id="shopifyQuantity"></dd>
                                    <dt class="col-sm-4">Last Synced</dt>
                                    <dd class="col-sm-8" id="shopifyLastSynced"></dd>
                                    <!-- Add more Shopify fields as needed -->
                                </dl>
                                <h5>Raw Shopify Data</h5>
                                <pre><code id="rawShopifyDataContent"></code></pre>
                            </div>
                        </div>
                        <!-- Raw Data Tab -->
                        <div class="tab-pane fade" id="raw" role="tabpanel" aria-labelledby="raw-tab">
                            <div class="mt-3">
                                <h5>Raw Combined Data</h5>
                                <pre><code id="rawFullDataContent"></code></pre>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- Optional: Add Edit button or other actions -->
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts specific to this view -->
    <script src="https://cdn.jsdelivr.net/npm/handsontable@13.1.0/dist/handsontable.full.min.js"></script>
    <script>
        let hot; // Define hot instance globally within the script

        // Table view state
        const tableState = {
            page: 1,
            pageSize: 50, // Default page size
            sortColumn: 'sku',
            sortOrder: 'asc',
            search: '',
            data: [],
            totalPages: 0,
            totalItems: 0
        };

        // Single DOMContentLoaded listener
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Table View DOMContentLoaded"); // Log for table view

            // Ensure Bootstrap is fully loaded
            if (typeof bootstrap !== 'undefined') {
                // Product modal initialization removed for Add Product feature (disabled).
                const productDetailsModalElement = document.getElementById('productDetailsModal');
                 if (productDetailsModalElement) {
                    const productDetailsModal = new bootstrap.Modal(productDetailsModalElement);
                    console.log('Bootstrap productDetailsModal initialized');
             } else {
                 console.warn('#productDetailsModal element not found. Cannot initialize modal.');
             }
          } else {
            } else {
                console.error('Bootstrap not loaded properly');
            }

            // Load saved page size preference
            const savedItemsPerPage = localStorage.getItem('inventoryItemsPerPage');
            if (savedItemsPerPage) {
                tableState.pageSize = parseInt(savedItemsPerPage);
            }

            // Initialize Handsontable
            const container = document.getElementById('hotTable'); // CORRECT ID
            if (!container) {
                console.error("Handsontable container #hotTable not found!");
                return; // Stop if container doesn't exist
            }

            try {
                 hot = new Handsontable(container, {
                    data: [],
                    columns: {{{json columns}}}, // Directly use columns from server
                    rowHeaders: true,
                    colHeaders: true, // Will be dynamically set by afterGetColHeader
                    columnSorting: false, // Disable built-in sorting, we handle it manually
                    filters: true,
                    dropdownMenu: true,
                    contextMenu: true,
                    // multiColumnSorting: true, // Disable if handling manually
                    manualRowMove: true,
                    height: '70vh',
                    licenseKey: 'non-commercial-and-evaluation',
                    afterChange: function(changes, source) {
                        if (source === 'loadData') return; // Don't trigger for initial data load
                        window.hasUnsavedChanges = true; // Mark that we have unsaved changes
                    },
                     afterGetColHeader: function(col, TH) {
                        // Add sorting indicators and click handlers
                        const columnSettings = this.getSettings().columns[col];
                        if (!columnSettings || !columnSettings.data) return; // Skip if no data mapping

                        const columnData = columnSettings.data;
                        const headerText = columnSettings.title || columnData; // Use title or data key

                        // Clear existing header content to avoid duplicates
                        const headerElement = TH.querySelector('.colHeader');
                        if (!headerElement) return;
                        headerElement.innerHTML = ''; // Clear previous content

                        // Add header text
                        const textNode = document.createTextNode(headerText);
                        headerElement.appendChild(textNode);

                        // Add sorting indicator span
                        const sortIndicator = document.createElement('span');
                        sortIndicator.classList.add('ms-1'); // Bootstrap margin start

                        if (columnData === tableState.sortColumn) {
                            sortIndicator.innerHTML = tableState.sortOrder === 'asc'
                                ? ' <i class="bi bi-caret-up-fill"></i>'
                                : ' <i class="bi bi-caret-down-fill"></i>';
                        } else {
                             // Optionally show up/down arrow for sortable columns not currently sorted
                             sortIndicator.innerHTML = ' <i class="bi bi-arrow-down-up text-muted"></i>';
                        }
                        headerElement.appendChild(sortIndicator);

                        // Make header clickable for sorting
                        TH.style.cursor = 'pointer';

                        // Remove previous listener before adding a new one to prevent duplicates
                        const newTH = TH.cloneNode(true);
                        TH.parentNode.replaceChild(newTH, TH);

                        Handsontable.dom.addEvent(newTH, 'click', (e) => {
                             if (e.target.closest('.htUI') || e.target.closest('input')) return; // Ignore clicks on filter/menu elements

                            console.log(`Sorting by: ${columnData}`);
                            if (columnData === tableState.sortColumn) {
                                tableState.sortOrder = tableState.sortOrder === 'asc' ? 'desc' : 'asc';
                            } else {
                                tableState.sortColumn = columnData;
                                tableState.sortOrder = 'asc';
                            }
                            tableState.page = 1; // Reset to first page
                            loadTableData();
                        });
                    },
                    // Make SKU and Name columns clickable using afterRender hook
                    afterRender: function(isForced) {
                        if (!isForced) return; // Only run on forced renders (like loadData)

                        const skuColIndex = this.propToCol('sku');
                        const nameColIndex = this.propToCol('name');
                        const rowCount = this.countRows();

                        for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {
                            const rowData = this.getSourceDataAtRow(rowIndex);
                            if (!rowData || !rowData.sku) continue; // Skip if no data or SKU

                            // Style SKU cell
                            if (skuColIndex !== -1) {
                                const skuTd = this.getCell(rowIndex, skuColIndex);
                                if (skuTd) {
                                    skuTd.style.cursor = 'pointer';
                                    skuTd.style.color = '#0d6efd';
                                    skuTd.style.textDecoration = 'underline';
                                    skuTd.setAttribute('data-sku', rowData.sku); // Add data-sku for click handler
                                }
                            }
                            // Style Name cell
                             if (nameColIndex !== -1) {
                                const nameTd = this.getCell(rowIndex, nameColIndex);
                                if (nameTd) {
                                    nameTd.style.cursor = 'pointer';
                                    nameTd.style.color = '#0d6efd';
                                    nameTd.style.textDecoration = 'underline';
                                    nameTd.setAttribute('data-sku', rowData.sku); // Add data-sku for click handler
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                 console.error("Error initializing Handsontable:", error);
                 alert("Failed to initialize the inventory table.");
                 return;
            }


            // Load the initial data
            console.log("Initial data load...");
            loadTableData();

            // Check for unsaved changes before leaving the page
            window.addEventListener('beforeunload', function(e) {
                if (window.hasUnsavedChanges) {
                    const confirmationMessage = 'You have unsaved changes. Are you sure you want to leave?';
                    e.returnValue = confirmationMessage; // Standard for most browsers
                    return confirmationMessage; // For older browsers
                }
            });

             // Add click handler for the inventory table container for SKU/Name clicks
            container.addEventListener('click', function(event) {
                const td = event.target.closest('td');
                // Check if the clicked cell has the data-sku attribute we added in afterRender
                if (td && td.hasAttribute('data-sku')) {
                    const sku = td.getAttribute('data-sku');
                    console.log('Cell clicked, fetching product details for SKU:', sku);
                    fetchProductDetails(sku); // Fetch and show modal
                }
            });
        });

        // Function to load table data with pagination
        async function loadTableData() {
            if (!hot) {
                 console.error("Handsontable instance (hot) is not available.");
                 return;
            }
            const loadingOverlay = document.getElementById('loadingOverlay'); // CORRECT ID
            if (loadingOverlay) loadingOverlay.style.display = 'flex';

            try {
                const { page, pageSize, sortColumn, sortOrder, search } = tableState;

                // Build query string
                const queryParams = new URLSearchParams({
                    page: page,
                    limit: pageSize,
                    sort: sortColumn,
                    order: sortOrder,
                    search: search
                });

                console.log(`Fetching table data: /inventory/api/data?${queryParams.toString()}`);
                const response = await fetch(`/inventory/api/data?${queryParams}`, { cache: 'no-store' }); // Added cache control

                if (!response.ok) {
                    throw new Error(`Failed to fetch inventory data: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                console.log("Table data received:", data);

                // Update state
                tableState.data = data.products;
                tableState.totalPages = data.pagination.totalPages;
                tableState.totalItems = data.pagination.totalItems;

                // Update table data
                hot.loadData(data.products);

                // Update UI elements
                updateTablePaginationUI();

                window.hasUnsavedChanges = false; // Reset unsaved changes flag after loading data
            } catch (error) {
                console.error('Error loading inventory data:', error);
                alert('Failed to load inventory data: ' + error.message);
            } finally {
                if (loadingOverlay) loadingOverlay.style.display = 'none';
            }
        }

        function updateTablePaginationUI() {
            const state = tableState;
            const itemsPerPageContainer = document.getElementById('itemsPerPageContainer');
            const pageNavigatorContainer = document.getElementById('pageNavigatorContainer');
            const countInfoElement = document.getElementById('countInfo');

            // Clear existing controls
            itemsPerPageContainer.innerHTML = '';
            pageNavigatorContainer.innerHTML = '';
            countInfoElement.innerHTML = '';

            // --- Items Per Page Dropdown ---
            const itemsPerPageDropdown = document.createElement('div');
            itemsPerPageDropdown.className = 'd-flex align-items-center';
            itemsPerPageDropdown.innerHTML = `
                <label class="me-2" for="itemsPerPageSelect">Show:</label>
                <select id="itemsPerPageSelect" class="form-select form-select-sm" style="width: auto;">
                    <option value="10"${state.pageSize === 10 ? ' selected' : ''}>10</option>
                    <option value="25"${state.pageSize === 25 ? ' selected' : ''}>25</option>
                    <option value="50"${state.pageSize === 50 ? ' selected' : ''}>50</option>
                    <option value="100"${state.pageSize === 100 ? ' selected' : ''}>100</option>
                </select>
                <span class="ms-2">items per page</span>
            `;
            itemsPerPageContainer.appendChild(itemsPerPageDropdown);

            // Add change listener for items per page
            document.getElementById('itemsPerPageSelect').addEventListener('change', function(e) {
                const newPageSize = parseInt(e.target.value);
                if (newPageSize !== state.pageSize) {
                    state.pageSize = newPageSize;
                    state.page = 1; // Reset to first page
                    localStorage.setItem('inventoryItemsPerPage', newPageSize); // Save preference
                    loadTableData();
                }
            });

            // --- Count Info ---
             if (countInfoElement) {
                if (state.totalItems > 0) {
                    const start = (state.page - 1) * state.pageSize + 1;
                    const end = Math.min(start + state.pageSize - 1, state.totalItems);
                    countInfoElement.innerHTML = `<span>Showing ${start} to ${end} of ${state.totalItems} products</span>`;
                } else {
                    countInfoElement.innerHTML = '<span>No items to display</span>';
                }
            }


            // --- Page Navigator ---
            if (state.totalPages > 0) {
                const pageNavigator = document.createElement('div');
                pageNavigator.className = 'page-navigator btn-group'; // Use btn-group for styling

                // Previous page button
                const prevButton = document.createElement('button');
                prevButton.className = `btn btn-outline-secondary ${state.page <= 1 ? 'disabled' : ''}`;
                prevButton.innerHTML = '<i class="bi bi-chevron-left"></i>';
                prevButton.disabled = state.page <= 1;
                prevButton.addEventListener('click', function() {
                    if (state.page > 1) {
                        state.page--;
                        loadTableData();
                    }
                });
                pageNavigator.appendChild(prevButton);

                // Page input and total
                const pageInfo = document.createElement('span');
                pageInfo.className = 'btn btn-outline-secondary disabled'; // Use button style for alignment
                pageInfo.innerHTML = `Page ${state.page} of ${state.totalPages}`;
                pageNavigator.appendChild(pageInfo);
                // Optional: Add input for direct page jump if needed

                // Next page button
                const nextButton = document.createElement('button');
                nextButton.className = `btn btn-outline-secondary ${state.page >= state.totalPages ? 'disabled' : ''}`;
                nextButton.innerHTML = '<i class="bi bi-chevron-right"></i>';
                nextButton.disabled = state.page >= state.totalPages;
                nextButton.addEventListener('click', function() {
                    if (state.page < state.totalPages) {
                        state.page++;
                        loadTableData();
                    }
                });
                pageNavigator.appendChild(nextButton);

                pageNavigatorContainer.appendChild(pageNavigator);
            }
        }

        // --- Event Listeners for Buttons ---

        // Add Product Button
        // Add Product flow intentionally disabled.
        // TODO(feature-flag): Add Product UI removed from inventory table view. To re-enable,
        // implement a shared `addProductModal` partial and reintroduce the button and handlers.


        // Add Property Button
         const addPropertyBtn = document.getElementById('addProperty');
         if (addPropertyBtn) {
            addPropertyBtn.addEventListener('click', async function() {
                console.log('Add property button clicked');
                const propertyName = prompt('Enter new property name:');
                if (propertyName) {
                    try {
                        const response = await fetch('/inventory/properties', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ propertyName })
                        });
                        if (response.ok) {
                            alert('Property added successfully! Reloading page...');
                            location.reload(); // Reload to get new columns
                        } else {
                             const errorData = await response.json().catch(() => ({ error: 'Failed to add property' }));
                            alert(`Failed to add property: ${errorData.error}`);
                        }
                    } catch (error) {
                        console.error('Error adding property:', error);
                        alert('Error adding property: ' + error.message);
                    }
                }
            });
        } else {
             console.warn("#addProperty button not found.");
        }


        // Save Changes Button
        const saveBtn = document.getElementById('save');
        if (saveBtn) {
            saveBtn.addEventListener('click', async function() {
                if (!hot) {
                     console.error("Handsontable instance not available for saving.");
                     return;
                }
                console.log('Save changes button clicked');
                // Get potentially modified data
                const changes = hot.getSourceData(); // Gets all rows as currently displayed

                if (!changes || changes.length === 0) {
                    alert("No data to save.");
                    return;
                }

                console.log("Saving changes:", changes);

                try {
                    const response = await fetch('/inventory', { // POST to /inventory endpoint
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ changes }) // Send data in expected format
                    });

                    if (response.ok) {
                        alert('Changes saved successfully!');
                        window.hasUnsavedChanges = false; // Reset flag
                        // Optionally reload data to confirm save
                        // loadTableData();
                    } else {
                         const errorData = await response.json().catch(() => ({ error: 'Failed to save changes' }));
                        alert(`Failed to save changes: ${errorData.message || errorData.error}`);
                    }
                } catch (error) {
                    console.error('Error saving changes:', error);
                    alert('Error saving changes: ' + error.message);
                }
            });
        } else {
             console.warn("#save button not found.");
        }


    // Search Functionality
    const searchBtn = document.getElementById('searchBtn');
    const searchInput = document.getElementById('searchInput');

        // Function to fetch product details on demand
        async function fetchProductDetails(sku) {
            if (!sku) {
                 console.warn("fetchProductDetails called without SKU.");
                 return;
            }
            console.log('Fetching product details for SKU:', sku);
            try {
                const response = await fetch(`/inventory/product/${sku}`); // Use specific product endpoint
                if (response.ok) {
                    const product = await response.json();
                    showProductDetails(product);
                } else {
                    console.error(`Failed to fetch product details for ${sku}: ${response.status}`);
                     alert(`Failed to fetch details for SKU ${sku}.`);
                }
            } catch (error) {
                console.error('Error fetching product details:', error);
                 alert(`Error fetching details: ${error.message}`);
            }
        }

        // Function to show product details modal (assuming modal HTML exists)
        function showProductDetails(product) {
             const productDetailsModalElement = document.getElementById('productDetailsModal');
             if (!productDetailsModalElement) {
                 console.error("Product details modal element #productDetailsModal not found.");
                 alert("Cannot display product details: Modal missing.");
                 return;
             }

            console.log('Showing product details for:', product.name);

            // --- Populate Modal Fields (Ensure these IDs exist in your modal HTML) ---
            const setContent = (id, value) => {
                const el = document.getElementById(id);
                if (el) el.textContent = value !== null && value !== undefined ? value : 'N/A';
                // else console.warn(`Element #${id} not found in details modal.`);
            };

            setContent('productTitle', product.name);
            setContent('productSku', product.sku);
            setContent('productLocation', product.location);
            setContent('productOnHand', product.quantity_on_hand);
            setContent('productAvailable', product.quantity_available); // Assumes backend calculates this

            // Raw Full Data
            const rawFullDataEl = document.getElementById('rawFullDataContent');
            if (rawFullDataEl) rawFullDataEl.textContent = JSON.stringify(product, null, 2);

            // Etsy Data
            const etsyData = product.etsy_data || {};
            setContent('etsyQuantity', etsyData.quantity);
            setContent('etsyListingId', etsyData.listing_id);
            setContent('etsyStatus', etsyData.state);
            setContent('etsyLastSynced', etsyData.last_synced ? new Date(etsyData.last_synced).toLocaleString() : 'Never');
            setContent('etsyPrice', etsyData.price?.amount ? `${(etsyData.price.amount / etsyData.price.divisor).toFixed(2)} ${etsyData.price.currency_code}` : 'N/A');

            const etsyLink = document.getElementById('etsyLink');
            if (etsyLink) {
                if (etsyData.listing_id) {
                    etsyLink.href = `https://www.etsy.com/listing/${etsyData.listing_id}`;
                    etsyLink.classList.remove('d-none');
                } else {
                    etsyLink.classList.add('d-none');
                }
            }
            const rawEtsyDataEl = document.getElementById('rawEtsyDataContent');
             if (rawEtsyDataEl) rawEtsyDataEl.textContent = JSON.stringify(etsyData, null, 2);

            // Image Carousel: prefer Etsy images, then raw Shopify product images (originalSrc)
            const carouselInner = document.getElementById('carouselImages');
            if (carouselInner) {
                carouselInner.innerHTML = ''; // Clear previous images
                // Prefer Etsy images when available
                if (etsyData.images && etsyData.images.length > 0) {
                    etsyData.images.forEach((image, index) => {
                        const item = document.createElement('div');
                        item.className = `carousel-item ${index === 0 ? 'active' : ''}`;
                        const img = document.createElement('img');
                        // Use the highest resolution available, fallback if needed
                        img.src = image.url_fullxfull || image.url_570xN || image.url_170x135 || image.url_75x75 || image.url;
                        img.className = 'd-block w-100';
                        img.alt = product.name || 'Product image';
                        img.style.objectFit = 'contain';
                        img.style.maxHeight = '400px';
                        item.appendChild(img);
                        carouselInner.appendChild(item);
                    });
                    // Ensure carousel controls are visible if there are images
                    const carouselControls = productDetailsModalElement.querySelectorAll('.carousel-control-prev, .carousel-control-next');
                    carouselControls.forEach(el => el.classList.toggle('d-none', etsyData.images.length <= 1));

                // Fallback to raw Shopify product images (GraphQL edges -> node.originalSrc)
                } else if (product.raw_shopify_data && product.raw_shopify_data.product && product.raw_shopify_data.product.images && product.raw_shopify_data.product.images.edges && product.raw_shopify_data.product.images.edges.length > 0) {
                    product.raw_shopify_data.product.images.edges.forEach((edge, index) => {
                        const item = document.createElement('div');
                        item.className = `carousel-item ${index === 0 ? 'active' : ''}`;
                        const img = document.createElement('img');
                        img.src = edge.node.originalSrc || edge.node.url || '';
                        img.className = 'd-block w-100';
                        img.alt = edge.node.altText || product.name || 'Product image';
                        img.style.objectFit = 'contain';
                        img.style.maxHeight = '400px';
                        item.appendChild(img);
                        carouselInner.appendChild(item);
                    });
                    const carouselControls = productDetailsModalElement.querySelectorAll('.carousel-control-prev, .carousel-control-next');
                    carouselControls.forEach(el => el.classList.toggle('d-none', product.raw_shopify_data.product.images.edges.length <= 1));

                } else {
                    // No images available
                    carouselInner.innerHTML = '<div class="carousel-item active"><div class="d-flex justify-content-center align-items-center h-100"><span class="text-muted">No images available</span></div></div>';
                    const carouselControls = productDetailsModalElement.querySelectorAll('.carousel-control-prev, .carousel-control-next');
                    carouselControls.forEach(el => el.classList.add('d-none'));
                }
            }


            // Shopify Data (Add more fields as needed)
            const shopifyData = product.shopify_data || {};
            // Assuming shopify_data.inventory_quantity holds the quantity
            setContent('shopifyQuantity', shopifyData.inventory_quantity);

            const shopifyLink = document.getElementById('shopifyLink');
            if (shopifyLink) {
                // Prefer an explicit product_url if provided by the backend
                if (shopifyData.product_url) {
                    shopifyLink.href = shopifyData.product_url;
                    shopifyLink.classList.remove('d-none');
                } else {
                    // Determine available identifiers. We should only build a URL when we have a reliable domain or can use the admin.shopify.com pattern with a stored shop name.
                    const shopDomain = shopifyData.shop_domain || null;
                    const storedShop = product.shopifyShopName || null; // returned by API when available

                    // If we have the public shop domain and a handle, build storefront link
                    if (shopDomain && shopifyData.handle) {
                        shopifyLink.href = `https://${shopDomain}/products/${shopifyData.handle}`;
                        shopifyLink.classList.remove('d-none');

                    // If we have a stored shop name and a product id, prefer the admin.shopify.com/store/{shop}/products/{id} pattern
                    } else if (storedShop && shopifyData.product_id) {
                        shopifyLink.href = `https://admin.shopify.com/store/${storedShop}/products/${shopifyData.product_id}`;
                        shopifyLink.classList.remove('d-none');

                    // If raw shopify product contains an online_store_url, use it
                    } else if (product.raw_shopify_data && product.raw_shopify_data.product && product.raw_shopify_data.product.online_store_url) {
                        shopifyLink.href = product.raw_shopify_data.product.online_store_url;
                        shopifyLink.classList.remove('d-none');

                    } else {
                        // No reliable URL can be constructed; hide the link to avoid malformed hrefs
                        shopifyLink.classList.add('d-none');
                        shopifyLink.removeAttribute('href');
                    }
                }
            }
             const rawShopifyDataEl = document.getElementById('rawShopifyDataContent');
             if (rawShopifyDataEl) rawShopifyDataEl.textContent = JSON.stringify(shopifyData, null, 2);


            // Show the modal
            const modal = bootstrap.Modal.getInstance(productDetailsModalElement) || new bootstrap.Modal(productDetailsModalElement);
            modal.show();
        }

    </script>
</body>
</html>