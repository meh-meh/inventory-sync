<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sync Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Keep specific styles for this view */
        .sync-card { margin-bottom: 20px; }
        .marketplace-icon { font-size: 2em; margin-bottom: 10px; }
        .sync-stats { font-size: 0.9em; color: #666; }
        #syncStatusArea { display: none; } /* Initially hidden */
        .count-value { font-weight: bold; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2>Sync Dashboard</h2>
        
        <!-- Live sync status reporting area -->
        <div id="syncStatusArea" class="alert alert-secondary mb-4">
            <h5 id="syncTitle">Syncing...</h5>
            <div id="syncDetails">
                <!-- Details populated by JS -->
            </div>
            <div class="progress mt-2">
                <div id="syncProgressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div id="syncLog" class="mt-2" style="max-height: 200px; overflow-y: auto; font-size: 0.8em; background-color: #f8f9fa; padding: 10px; border-radius: 4px;">
                <!-- Log messages populated by JS -->
            </div>
        </div>

        <div class="row">
            <!-- Sync Products Card -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-box-seam marketplace-icon"></i>
                        <h5 class="card-title">Sync Products</h5>
                        <p class="card-text">Update product listings and details between Etsy, Shopify, and local database.</p>
                        <div class="btn-group">
                            <button id="syncEtsyProductsBtn" class="btn btn-primary">Sync Etsy Products</button>
                            <button id="syncShopifyProductsBtn" class="btn btn-success">Sync Shopify Products</button>
                        </div>
                        <div class="sync-stats mt-2">
                            {{!-- Use the variables passed directly from the route --}}
                            Last Etsy Sync: {{lastEtsyProductSync}} <br>
                            Last Shopify Sync: {{lastShopifyProductSync}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sync Inventory Card -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-clipboard-check marketplace-icon"></i>
                        <h5 class="card-title">Sync Inventory Levels</h5>
                        <p class="card-text">Synchronize stock quantities across all connected platforms based on local data.</p>
                        <button id="syncInventoryBtn" class="btn btn-warning">Sync All Inventory</button>
                        <div class="sync-stats mt-2">
                            Last Inventory Sync: {{formatDate stats.lastInventorySync}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sync Orders Card -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-receipt marketplace-icon"></i>
                        <h5 class="card-title">Sync Orders</h5>
                        <p class="card-text">Fetch new orders from Etsy and Shopify.</p>
                        <div class="btn-group">
                            <a href="/sync/sync-orders?marketplace=etsy" class="btn btn-outline-primary">Sync Etsy Orders</a>
                            <a href="/sync/sync-orders?marketplace=shopify" class="btn btn-outline-success">Sync Shopify Orders</a>
                        </div>
                         <div class="sync-stats mt-2">
                            {{!-- Use the variables passed directly from the route --}}
                            Last Etsy Order Sync: {{lastEtsyOrderSync}} <br>
                            Last Shopify Order Sync: {{lastShopifyOrderSync}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Other Sync Actions (Optional) -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-gear marketplace-icon"></i>
                        <h5 class="card-title">Other Actions</h5>
                        <p class="card-text">Perform specific maintenance or sync tasks.</p>
                        <button id="reconcileBtn" class="btn btn-secondary">Reconcile Data</button>
                        <!-- Add more buttons as needed -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Sync Status Handling -->
    <script>
        // Track sync session ID
        let currentSyncId = null;
        let syncCheckInterval = null;
        
        // Function to start monitoring a sync process
        function startSyncMonitor(syncId) { // Added syncType
            const marketplace = syncId.split('-')[0]; // Extract marketplace from syncId
            const syncType = syncId.split('-')[1]; // Extract sync type from syncId

            console.log(`Starting to monitor sync process ${syncId} for ${marketplace} ${syncType}`);
            const statusArea = document.getElementById('syncStatusArea');
            const syncTitle = document.getElementById('syncTitle');
            const syncDetails = document.getElementById('syncDetails');
            const progressBar = document.getElementById('syncProgressBar');
            const syncLog = document.getElementById('syncLog');
            
            // Reset UI elements
            syncTitle.textContent = `Syncing ${marketplace} ${syncType}...`;
            syncDetails.innerHTML = ''; // Clear previous details
            syncLog.innerHTML = ''; // Clear previous logs
            progressBar.style.width = '0%';
            progressBar.setAttribute('aria-valuenow', '0');
            progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated'; // Reset progress bar style
            
            // Show the status area
            statusArea.style.display = 'block';
            statusArea.className = 'alert alert-info mb-4'; // Use info style while syncing
            
            // Store the sync ID
            currentSyncId = syncId;
            
            // Clear any existing interval
            if (syncCheckInterval) {
                clearInterval(syncCheckInterval);
            }
            
            // Start polling for updates
            updateSyncStatus(); // Initial call
            syncCheckInterval = setInterval(updateSyncStatus, 1000); // Poll every 1 second
        }
        
        // Function to update the sync status display
        async function updateSyncStatus() {
            if (!currentSyncId) return;
            
            try {
                console.log(`Polling for sync status: ${currentSyncId}`);
                const response = await fetch(`/sync/status/${currentSyncId}`);
                if (!response.ok) {
                    // Handle cases where the sync process might have ended abruptly
                    if (response.status === 404) {
                        console.warn(`Sync process ${currentSyncId} not found. Assuming complete or error.`);
                        clearInterval(syncCheckInterval);
                        syncCheckInterval = null;
                        // Optionally update UI to reflect unknown status or potential error
                        const statusArea = document.getElementById('syncStatusArea');
                        statusArea.className = 'alert alert-warning mb-4';
                        document.getElementById('syncTitle').textContent = 'Sync Status Unknown';
                        return;
                    }
                    throw new Error(`Failed to fetch sync status: ${response.status} ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Received sync status:', data);
                
                const progressBar = document.getElementById('syncProgressBar');
                const syncDetails = document.getElementById('syncDetails');
                const syncLog = document.getElementById('syncLog');
                const syncTitle = document.getElementById('syncTitle');
                const statusArea = document.getElementById('syncStatusArea');

                // Update details and log
                syncDetails.innerHTML = `Phase: ${data.currentPhase || 'Starting...'}<br>Processed: ${data.processedCount || 0}`;
                if (data.log && syncLog.lastChild?.textContent !== data.log[data.log.length - 1]) {
                    syncLog.innerHTML = data.log.map(entry => `<div>${entry}</div>`).join('');
                    syncLog.scrollTop = syncLog.scrollHeight; // Scroll to bottom
                }
                // Hide syncLog if empty, show if not
                if (!syncLog.innerHTML.trim()) {
                    syncLog.style.display = 'none';
                } else {
                    syncLog.style.display = 'block';
                }
                
                // Update progress bar
                if (data.complete) {
                    progressBar.style.width = '100%';
                    progressBar.setAttribute('aria-valuenow', 100);
                } else {
                    progressBar.style.width = `${data.progress || 0}%`;
                    progressBar.setAttribute('aria-valuenow', data.progress || 0);
                }
                
                // If sync is complete, update display
                if (data.complete) {
                    clearInterval(syncCheckInterval);
                    syncCheckInterval = null;
                    currentSyncId = null; // Clear current sync ID
                    localStorage.removeItem('currentSyncId'); // Clear syncId from localStorage
                    
                    progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated');
                    
                    if (data.error) {
                        statusArea.className = 'alert alert-danger mb-4';
                        syncTitle.textContent = `Sync Error: ${data.error}`; 
                        progressBar.classList.add('bg-danger');
                    } else {
                        statusArea.className = 'alert alert-success mb-4';
                        syncTitle.textContent = 'Sync Complete';
                        progressBar.classList.add('bg-success');
                        // Optionally reload the page slightly later to show updated sync times
                        // setTimeout(() => window.location.reload(), 2000);
                    }
                }
            } catch (error) {
                console.error('Error checking sync status:', error);
                // Optionally stop polling on error
                // clearInterval(syncCheckInterval);
                // syncCheckInterval = null;
                // Update UI to show error fetching status
            }
        }
        
        // Check if we have a syncId in the URL
        function checkUrlForSyncId() {
            const urlParams = new URLSearchParams(window.location.search);
            const syncId = urlParams.get('syncId');
            
            if (syncId) {
                console.log(`Found syncId in URL: ${syncId}`);
                startSyncMonitor(syncId);
                
                // Clear the syncId from the URL to prevent auto-starting on refresh
                if (history.pushState) {
                    const newUrl = window.location.protocol + "//" + 
                                window.location.host + 
                                window.location.pathname;
                    window.history.pushState({path: newUrl}, '', newUrl);
                }
            }
        }
        
        // Function to initiate a sync process
        function startSync(marketplace, syncType = 'Products') {
            const syncId = `${marketplace}-${syncType}-${Date.now()}`;
            localStorage.setItem('currentSyncId', syncId); // Save syncId
            console.log(`Starting ${marketplace} ${syncType} sync with ID: ${syncId}`);
            
            // Start monitoring the sync immediately
            startSyncMonitor(syncId);
            
            let syncUrl;
            if (syncType === 'Products') {
                syncUrl = `/sync/sync-${marketplace.toLowerCase()}?syncId=${syncId}`;
            } else if (syncType === 'Orders') {
                // Orders sync currently uses redirects, not background tasks with status
                // For now, just navigate for orders
                window.location.href = `/sync/sync-orders?marketplace=${marketplace.toLowerCase()}`;
                return; // Exit early for orders
            }
            // Add other sync types here if needed

            if (!syncUrl) {
                console.error('Invalid sync type for background task:', syncType);
                alert('Invalid sync type');
                return;
            }

            // Fetch to start the background sync process
            fetch(syncUrl)
                .then(response => {
                    if (!response.ok) {
                        // Attempt to read error message if available
                        return response.text().then(text => {
                            throw new Error(`Failed to start sync: ${response.status} ${response.statusText} - ${text}`);
                        });
                    }
                    console.log(`${marketplace} ${syncType} sync started successfully via fetch.`);
                    // No need to do anything else, the monitor will handle updates
                })
                .catch(error => {
                    console.error(`Error starting ${marketplace} ${syncType} sync:`, error);
                    alert(`Error starting sync: ${error.message}`);
                    // Update UI to show the error
                    const statusArea = document.getElementById('syncStatusArea');
                    const syncTitle = document.getElementById('syncTitle');
                    statusArea.className = 'alert alert-danger mb-4';
                    syncTitle.textContent = `Failed to start sync: ${error.message}`;
                    if (syncCheckInterval) clearInterval(syncCheckInterval);
                    syncCheckInterval = null;
                    currentSyncId = null;
                });
        }
        
        // Attach event listeners to sync buttons
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, setting up event listeners');
            
            // Check for syncId in URL (if needed for resuming monitoring)
            // checkUrlForSyncId(); 
            
            const savedSyncId = localStorage.getItem('currentSyncId');
            if (savedSyncId) {
                startSyncMonitor(savedSyncId);
            }

            const etsyProductsBtn = document.getElementById('syncEtsyProductsBtn');
            const shopifyProductsBtn = document.getElementById('syncShopifyProductsBtn');
            const etsyOrdersLink = document.querySelector('a[href="/sync/sync-orders?marketplace=etsy"]');
            const shopifyOrdersLink = document.querySelector('a[href="/sync/sync-orders?marketplace=shopify"]');

            if (etsyProductsBtn) {
                console.log('Found Etsy products button, attaching listener');
                etsyProductsBtn.addEventListener('click', () => startSync('Etsy', 'Products'));
            } else {
                console.warn('Etsy products button (#syncEtsyProductsBtn) not found');
            }

            if (shopifyProductsBtn) {
                console.log('Found Shopify products button, attaching listener');
                // NOTE: This assumes /sync/sync-shopify is updated to run in the background like Etsy
                // If it still runs synchronously and redirects, this JS needs adjustment.
                shopifyProductsBtn.addEventListener('click', () => startSync('Shopify', 'Products'));
            } else {
                console.warn('Shopify products button (#syncShopifyProductsBtn) not found');
            }

            // Keep standard navigation for Order sync links for now
            // If you want background order sync, these would need similar handling
            if (etsyOrdersLink) {
                console.log('Found Etsy orders link');
            } else {
                console.warn('Etsy orders link not found');
            }
            if (shopifyOrdersLink) {
                console.log('Found Shopify orders link');
            } else {
                console.warn('Shopify orders link not found');
            }

        });
    </script>
</body>
</html>