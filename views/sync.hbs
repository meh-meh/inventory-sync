<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sync Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Add UUID library -->
    <script src="https://cdn.jsdelivr.net/npm/uuid@latest/dist/umd/uuidv4.min.js"></script>
    <style>
        /* Keep specific styles for this view */
        .sync-card { margin-bottom: 20px; }
        .marketplace-icon { font-size: 2em; margin-bottom: 10px; }
        .sync-stats { font-size: 0.9em; color: #666; }
        #syncStatusArea { display: none; } /* Initially hidden */
        .count-value { font-weight: bold; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2>Sync Dashboard</h2>
        
        <!-- Live sync status reporting area -->
        <div id="syncStatusArea" class="alert alert-secondary mb-4" style="display: none; position: relative;">
            <button id="closeSyncStatusBtn" type="button" class="btn-close" aria-label="Close" style="position: absolute; top: 10px; right: 10px; display: none;"></button>
            <h5 id="syncTitle">Syncing...</h5>
            <div id="syncDetails">
                <!-- Details populated by JS -->
            </div>
            <div class="progress mt-2">
                <div id="syncProgressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div id="syncLog" class="mt-2" style="max-height: 200px; overflow-y: auto; font-size: 0.8em; background-color: #f8f9fa; padding: 10px; border-radius: 4px;">
                <!-- Log messages populated by JS -->
            </div>
        </div>

        <div class="row">
            <!-- Sync Products Card -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-box-seam marketplace-icon"></i>
                        <h5 class="card-title">Sync Products</h5>
                        <p class="card-text">Update product listings and details between Etsy, Shopify, and local database.</p>
                        <div class="btn-group">
                            <button id="syncEtsyProductsBtn" class="btn btn-primary">Sync Etsy Products</button>
                            <button id="syncShopifyProductsBtn" class="btn btn-success">Sync Shopify Products</button>
                        </div>
                        <div class="sync-stats mt-2">
                            {{!-- Use the variables passed directly from the route --}}
                            Last Etsy Sync: {{lastEtsyProductSync}} <br>
                            Last Shopify Sync: {{lastShopifyProductSync}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sync Inventory Card -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-clipboard-check marketplace-icon"></i>
                        <h5 class="card-title">Sync Inventory Levels</h5>
                        <p class="card-text">Synchronize stock quantities across all connected platforms based on local data.</p>
                        <button id="syncInventoryBtn" class="btn btn-warning">Sync All Inventory</button>
                        <div class="sync-stats mt-2">
                            Last Inventory Sync: {{formatDate stats.lastInventorySync}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sync Orders Card -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-receipt marketplace-icon"></i>
                        <h5 class="card-title">Sync Orders</h5>
                        <p class="card-text">Fetch new orders from Etsy and Shopify.</p>
                        <div class="btn-group">
                            <button id="syncEtsyOrdersBtn" class="btn btn-outline-primary">Sync Etsy Orders</button>
                            <button id="syncShopifyOrdersBtn" class="btn btn-outline-success">Sync Shopify Orders</button>
                        </div>
                         <div class="sync-stats mt-2">
                            {{!-- Use the variables passed directly from the route --}}
                            Last Etsy Order Sync: {{lastEtsyOrderSync}} <br>
                            Last Shopify Order Sync: {{lastShopifyOrderSync}}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Other Sync Actions (Optional) -->
            <div class="col-md-6">
                <div class="card sync-card">
                    <div class="card-body text-center">
                        <i class="bi bi-gear marketplace-icon"></i>
                        <h5 class="card-title">Other Actions</h5>
                        <p class="card-text">Perform specific maintenance or sync tasks.</p>
                        <button id="reconcileBtn" class="btn btn-secondary">Reconcile Data</button>
                        <!-- Add more buttons as needed -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Section for Ongoing Automatic Syncs -->
    {{#if ongoingAutoSyncs.length}}
    <div class="container mt-4">
        <h4>Ongoing Automatic Syncs</h4>
        <div class="row">
            {{#each ongoingAutoSyncs}}
            <div class="col-md-6 mb-3">
                <div class="card">
                    <div class="card-header">
                        <strong>{{this.marketplace}} - {{this.syncType}}</strong>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Sync ID: <small class="text-muted">{{this.syncId}}</small></p>
                        <p class="card-text">Status: {{this.currentPhase}}</p>
                        <p class="card-text">Progress: {{this.progress}}%</p>
                        <div class="progress mb-2">
                            <div class="progress-bar" role="progressbar" style="width: {{this.progress}}%;" aria-valuenow="{{this.progress}}" aria-valuemin="0" aria-valuemax="100">{{this.progress}}%</div>
                        </div>
                        <p class="card-text">Started: {{formatDate this.startTime}}</p>
                        {{#if this.error}}
                        <p class="card-text text-danger">Error: {{this.error}}</p>
                        {{/if}}
                         <p class="card-text"><small>Items Processed: {{this.processedCount}} / {{this.totalCount}}</small></p>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
    </div>
    {{/if}}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Sync Status Handling -->
    <script>
        // Track active sync processes
        let activeSyncs = {};
        let syncCheckIntervals = {};
        
        // Generate a proper UUID v4 for syncId
        function generateSyncId(marketplace, syncType) {
            // Use the actual UUID v4 function from the loaded library
            return `${marketplace.toLowerCase()}-${syncType.toLowerCase()}-${uuidv4()}`;
        }
        
        // Store multiple syncIds in localStorage
        function storeSyncId(syncId) {
            let syncIds = getSavedSyncIds();
            if (!syncIds.includes(syncId)) {
                syncIds.push(syncId);
                localStorage.setItem('activeSyncIds', JSON.stringify(syncIds));
            }
        }
        
        // Remove a syncId from localStorage
        function removeSyncId(syncId) {
            let syncIds = getSavedSyncIds();
            syncIds = syncIds.filter(id => id !== syncId);
            localStorage.setItem('activeSyncIds', JSON.stringify(syncIds));
        }
        
        // Get all saved syncIds
        function getSavedSyncIds() {
            const saved = localStorage.getItem('activeSyncIds');
            return saved ? JSON.parse(saved) : [];
        }
        
        // Function to start monitoring a sync process
        function startSyncMonitor(syncId) {
            if (!syncId) return;
            
            const parts = syncId.split('-');
            if (parts.length < 3) {
                console.error('Invalid syncId format:', syncId);
                return;
            }
            
            const marketplace = parts[0];
            const syncType = parts[1];

            console.log(`Starting to monitor sync process ${syncId} for ${marketplace} ${syncType}`);
            
            // Always show the status area/modal when a sync starts
            updateSyncModal({
                visible: true,
                title: `Syncing ${marketplace} ${syncType}...`,
                details: 'Initializing sync process...',
                progress: 0,
                log: [],
                status: 'info',
                closable: false
            });
            
            // Store the sync ID
            activeSyncs[syncId] = {
                marketplace,
                syncType,
                startTime: new Date()
            };
            
            // Clear any existing interval for this syncId
            if (syncCheckIntervals[syncId]) {
                clearInterval(syncCheckIntervals[syncId]);
            }
            
            // Add a short delay before the first status check to allow the server to initialize
            setTimeout(() => {
                // Start polling for updates
                updateSyncStatus(syncId); // Initial call after delay
                syncCheckIntervals[syncId] = setInterval(() => updateSyncStatus(syncId), 500); // Poll every 0.5 second
            }, 1000); // 1 second delay before first check
        }
        
        // Function to update the sync status display
        async function updateSyncStatus(syncId) {
            if (!syncId || !activeSyncs[syncId]) {
                console.warn(`No valid sync process found for ID: ${syncId}`);
                return;
            }
            
            try {
                console.log(`Polling for sync status: ${syncId}`);
                const response = await fetch(`/sync/status/${syncId}`);
                if (!response.ok) {
                    // Handle cases where the sync process might have ended abruptly
                    if (response.status === 404) {
                        // Only make modal closable if it was already open
                        updateSyncModal({
                            visible: true,
                            title: 'Sync not found or already finished.',
                            status: 'warning',
                            closable: true
                        });
                        clearInterval(syncCheckIntervals[syncId]);
                        delete syncCheckIntervals[syncId];
                        delete activeSyncs[syncId];
                        removeSyncId(syncId);
                        return;
                    }
                    throw new Error(`Failed to fetch sync status: ${response.status} ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Received sync status:', data);
                  // Update details and log
                const details = `Phase: ${data.currentPhase || 'Starting...'}<br>` + 
                                `Processed: ${data.processedCount || 0} of ${data.totalCount || '?'}<br>` +
                                `Progress: ${data.progress || 0}%`;
                const log = data.log || [];
                
                // Update progress bar
                const progress = data.complete ? 100 : (data.progress || 0);
                
                // If sync is complete, update display
                if (data.complete) {
                    clearInterval(syncCheckIntervals[syncId]);
                    delete syncCheckIntervals[syncId];
                    delete activeSyncs[syncId];
                    removeSyncId(syncId);
                    
                    const status = data.error ? 'danger' : 'success';
                    const title = data.error ? `Sync Error: ${data.error}` : 'Sync Complete';
                    updateSyncModal({
                        visible: true,
                        title,
                        details,
                        progress,
                        log,
                        status,
                        closable: true
                    });
                } else {
                    updateSyncModal({
                        visible: true,
                        title: `Syncing...`,
                        details,
                        progress,
                        log,
                        status: 'info',
                        closable: false
                    });
                }
            } catch (error) {
                console.error('Error checking sync status:', error);
                // Don't stop polling on network errors - it might be temporary
            }
        }
        
        // Function to initiate a sync process
        function startSync(marketplace, syncType = 'Products') {
            const syncId = generateSyncId(marketplace, syncType);
            storeSyncId(syncId); // Save syncId in the array of active syncs
            console.log(`Starting ${marketplace} ${syncType} sync with ID: ${syncId}`);
            
            // Show modal and start monitoring
            updateSyncModal({
                visible: true,
                title: `Syncing ${marketplace} ${syncType}...`,
                details: '',
                progress: 0,
                log: [],
                status: 'info',
                closable: false,
                syncId
            });
            
            let syncUrl;
            if (syncType === 'Products') {
                syncUrl = `/sync/sync-${marketplace.toLowerCase()}?syncId=${syncId}`;
            } else if (syncType === 'Orders') {
                syncUrl = `/sync/sync-orders?marketplace=${marketplace.toLowerCase()}&syncId=${syncId}`;
            } else if (syncType === 'Reconcile') {
                syncUrl = `/sync/secretroute?syncId=${syncId}`;
            } 
            // Add other sync types here if needed

            if (!syncUrl) {
                console.error('Invalid sync type for background task:', syncType);
                alert('Invalid sync type');
                return;
            }

            // Fetch to start the background sync process
            fetch(syncUrl)
                .then(response => {
                    if (!response.ok) {
                        // Attempt to read error message if available
                        return response.text().then(text => {
                            throw new Error(`Failed to start sync: ${response.status} ${response.statusText} - ${text}`);
                        });
                    }
                    console.log(`${marketplace} ${syncType} sync started successfully via fetch.`);
                    // No need to do anything else, the monitor will handle updates
                })
                .catch(error => {
                    console.error(`Error starting ${marketplace} ${syncType} sync:`, error);
                    alert(`Error starting sync: ${error.message}`);
                    // Update UI to show the error
                    updateSyncModal({
                        visible: true,
                        title: `Failed to start sync: ${error.message}`,
                        status: 'danger',
                        closable: true
                    });
                    
                    // Clean up on error
                    if (syncCheckIntervals[syncId]) {
                        clearInterval(syncCheckIntervals[syncId]);
                        delete syncCheckIntervals[syncId];
                    }
                    delete activeSyncs[syncId];
                    removeSyncId(syncId);
                });
        }
        
        // Attach event listeners to sync buttons
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, setting up event listeners');
            
            // Resume monitoring for any active syncs
            const savedSyncIds = getSavedSyncIds();
            if (savedSyncIds.length > 0) {
                console.log(`Found ${savedSyncIds.length} active syncs to resume monitoring`);
                savedSyncIds.forEach(syncId => startSyncMonitor(syncId));
            }

            const etsyProductsBtn = document.getElementById('syncEtsyProductsBtn');
            const shopifyProductsBtn = document.getElementById('syncShopifyProductsBtn');
            const etsyOrdersBtn = document.getElementById('syncEtsyOrdersBtn');
            const shopifyOrdersBtn = document.getElementById('syncShopifyOrdersBtn');

            if (etsyProductsBtn) {
                // console.log('Found Etsy products button, attaching listener');
                etsyProductsBtn.addEventListener('click', () => startSync('Etsy', 'Products'));
            } else {
                console.warn('Etsy products button (#syncEtsyProductsBtn) not found');
            }

            if (shopifyProductsBtn) {
                // console.log('Found Shopify products button, attaching listener');
                shopifyProductsBtn.addEventListener('click', () => startSync('Shopify', 'Products'));
            } else {
                console.warn('Shopify products button (#syncShopifyProductsBtn) not found');
            }

            if (etsyOrdersBtn) {
                etsyOrdersBtn.addEventListener('click', () => startSync('Etsy', 'Orders'));
            }
            if (shopifyOrdersBtn) {
                shopifyOrdersBtn.addEventListener('click', () => startSync('Shopify', 'Orders'));
            }

            const closeBtn = document.getElementById('closeSyncStatusBtn');
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    updateSyncModal({ visible: false });
                });
            }

            const reconcileBtn = document.getElementById('reconcileBtn');
            if (reconcileBtn) {
                reconcileBtn.addEventListener('click', () => startSync('Shopify', 'Reconcile'));
            }

        });

        /**
         * Updates or initializes the sync progress modal and manages polling.
         * @param {Object} opts - Modal options
         * @param {boolean} opts.visible - Show/hide the modal
         * @param {string} [opts.title] - Title text
         * @param {string} [opts.details] - Details HTML
         * @param {number} [opts.progress] - Progress percent (0-100)
         * @param {string[]} [opts.log] - Array of log strings
         * @param {string} [opts.status] - 'info' | 'success' | 'danger' | 'warning'
         * @param {boolean} [opts.closable] - Show/hide close button
         * @param {string} [opts.syncId] - If provided, will start monitoring this syncId
         */
        function updateSyncModal({ visible, title, details, progress, log, status = 'info', closable = false, syncId }) {
            const statusArea = document.getElementById('syncStatusArea');
            const syncTitle = document.getElementById('syncTitle');
            const syncDetails = document.getElementById('syncDetails');
            const progressBar = document.getElementById('syncProgressBar');
            const syncLog = document.getElementById('syncLog');
            const closeBtn = document.getElementById('closeSyncStatusBtn');

            // Show/hide modal
            statusArea.style.display = visible ? 'block' : 'none';
            // Set alert style
            statusArea.className = `alert alert-${status} mb-4`;
            // Title
            if (title !== undefined) syncTitle.textContent = title;
            // Details
            if (details !== undefined) syncDetails.innerHTML = details;
            // Progress bar
            if (progress !== undefined) {
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('aria-valuenow', progress);
                if (progress >= 100) {
                    progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated');
                } else {
                    progressBar.classList.add('progress-bar-striped', 'progress-bar-animated');
                }
            }
            // Log
            if (log !== undefined) {
                syncLog.innerHTML = log.length ? log.map(entry => `<div>${entry}</div>`).join('') : '';
                syncLog.style.display = log.length ? 'block' : 'none';
                if (log.length) syncLog.scrollTop = syncLog.scrollHeight;
            }
            // Close button
            closeBtn.style.display = closable ? 'block' : 'none';
            closeBtn.disabled = !closable;

            // If syncId is provided, start monitoring
            if (syncId) {
                startSyncMonitor(syncId);
            }
        }
    </script>
</body>
</html>